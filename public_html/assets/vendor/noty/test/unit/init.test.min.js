$(function(){function a(b,d){if(document.createEvent){var c=document.createEvent("HTMLEvents");c.initEvent(d,true,false);b.dispatchEvent(c)}else{b.fireEvent(d)}}Noty.overrideDefaults({text:"Noty Test Suite"});QUnit.module("Initializing");QUnit.test("should be defined",function(b){b.expect(1);b.ok(Noty,"Noty is defined")});QUnit.test("should return a Noty object",function(b){b.expect(11);var c=new Noty();b.ok(c instanceof Noty,"returns Noty object");b.ok(c.options,"has accessible properties");b.strictEqual(c.id.length,45,"has auto generated ID");b.strictEqual(c.closed,false,".closed should be false");b.strictEqual(c.shown,false,".shown should be false");b.strictEqual(c.closeTimer,-1,".closeTimer should be -1");b.strictEqual(c.barDom,null,".barDom should be null");b.strictEqual(c.layoutDom,null,".layoutDom should be null");b.strictEqual(c.progressDom,null,".progressDom should be null");b.strictEqual(c.hasSound,false,".hasSound should be false");b.strictEqual(c.soundPlayed,false,".soundPlayed should be false")});QUnit.module("Callbacks");QUnit.test("beforeShow - should not be in the dom when beforeShow fired",function(c){c.expect(2);var b=c.async();new Noty().on("beforeShow",function(){c.ok(true,"beforeShow fired");c.strictEqual($("#"+this.id).length,0,"noty not in the document");b()}).show().close()});QUnit.test("onShow - should insert into dom when show method is called",function(c){c.expect(2);var b=c.async();new Noty().on("onShow",function(){c.strictEqual($("#"+this.id).length,1,"noty inserted into dom");c.ok(true,"onShow fired");b()}).show().close()});QUnit.test("afterShow - should fire event",function(c){c.expect(2);var b=c.async();new Noty().on("afterShow",function(){c.ok(true,"afterShow fired");c.strictEqual($("#"+this.id).length,1,"noty in the dom");b()}).show()});QUnit.test("preventing - should not fire afterShow when show was prevented",function(c){c.expect(1);var b=c.async();new Noty().on("onShow",function(){this.close();c.ok(true,"onShow event fired");b()}).on("afterShow",function(){c.ok(false,"afterShow event fired")}).show().close()});QUnit.test("onClose - should fire event",function(c){c.expect(2);var b=c.async();new Noty().on("onClose",function(){c.ok(true,"onClose fired");c.strictEqual($("#"+this.id).length,1,"noty in the dom");b()}).show().close()});QUnit.test("onTemplate - ",function(c){c.expect(2);var b=c.async();new Noty().on("onTemplate",function(){c.ok(true,"onTemplate fired");this.barDom.innerHTML="changed";c.strictEqual(this.barDom.innerHTML,"changed","noty.barDom can be modified");b()}).show().close()});QUnit.test("onHover",function(c){c.expect(1);var b=c.async();new Noty().on("onHover",function(){c.ok(true,"onHover fired");b()}).on("afterShow",function(){a($("#"+this.id)[0],"mouseenter")}).show()});QUnit.module("CloseWith");QUnit.test("click",function(c){c.expect(1);var b=c.async();new Noty({closeWith:["click"]}).on("afterShow",function(){a($("#"+this.id)[0],"click")}).on("afterClose",function(){c.ok(true,"closed by clicking");b()}).show()});QUnit.test("button",function(c){c.expect(1);var b=c.async();new Noty({closeWith:["button"]}).on("afterShow",function(){a($("#"+this.id).find(".noty_close_button")[0],"click")}).on("afterClose",function(){c.ok(true,"closed by x button");b()}).show()});QUnit.module("API");QUnit.test("stop() & resume()",function(c){c.expect(3);var b=c.async();new Noty({timeout:2000}).on("afterShow",function(){c.ok(this.options.timeout===2000,"has correct timeout");var d=this;setTimeout(function(){d.stop();c.ok(d.closeTimer===-1,"timer stopped");d.resume();setTimeout(function(){c.ok(d.closeTimer,"timer started");b()},250)},250)}).show()});QUnit.test("setTimeout()",function(c){c.expect(2);var b=c.async();new Noty({timeout:2000}).on("afterShow",function(){this.setTimeout(3000);c.ok(this.options.timeout===3000,"timeout override after show() called");b()}).show();c.ok(new Noty().setTimeout(3000).options.timeout===3000,"timeout overrided before show()")});QUnit.test("setText()",function(c){c.expect(3);var b=c.async();new Noty({text:"Rick"}).on("afterShow",function(){this.setText("Morty",true);c.ok(this.options.text==="Morty","text override after show() called");c.ok($("#"+this.id).find(".noty_body").text()==="Morty","text changed correctly");b()}).show();c.ok(new Noty().setText("Morty",true).options.text==="Morty","text override before show()")});QUnit.test("setType()",function(c){c.expect(4);var b=c.async();new Noty().on("afterShow",function(){this.setType("warning",true);var d=$("#"+this.id);c.equal(this.options.type,"warning","type override after show() called");c.ok(d.hasClass("noty_type__warning"),"new type changed correctly");c.notOk(d.hasClass("noty_type__alert"),"old type removed correctly");b()}).show();c.ok(new Noty().setType("warning",true).options.type==="warning","type override before show()")});QUnit.test("setTheme()",function(c){c.expect(4);var b=c.async();new Noty({theme:"mint"}).on("afterShow",function(){this.setTheme("relax",true);var d=$("#"+this.id);c.equal(this.options.theme,"relax","theme override after show() called");c.ok(d.hasClass("noty_theme__relax"),"new theme changed correctly");c.notOk(d.hasClass("noty_theme__mint"),"old theme removed correctly");b()}).show();c.ok(new Noty({theme:"mint"}).setTheme("relax",true).options.theme==="relax","theme override before show()")});QUnit.test("close()",function(c){c.expect(2);var b=c.async();new Noty().on("onClose",function(){c.ok(true,"onClose fired")}).on("afterClose",function(){c.ok(true,"afterClose fired");b()}).show().close()});QUnit.module("API Static");QUnit.test("overrideDefaults()",function(b){b.expect(1);var c={timeout:3000,theme:"relax",layout:"topCenter",progressBar:false,closeWith:["button"],animation:{open:null,close:null},force:true,sounds:{sources:["audio_file.wav"],volume:0.3,conditions:["docHidden"]},titleCount:{conditions:["docHidden"]}};Noty.overrideDefaults(c);var d=new Noty();b.deepEqual(c,{timeout:d.options.timeout,theme:d.options.theme,layout:d.options.layout,progressBar:d.options.progressBar,closeWith:d.options.closeWith,animation:d.options.animation,force:d.options.force,sounds:d.options.sounds,titleCount:d.options.titleCount},"override ok")});QUnit.test("setMaxVisible()",function(d){d.expect(2);var c=0;Noty.setMaxVisible(1);new Noty().on("beforeShow",function(){c++}).show();new Noty().on("beforeShow",function(){c++}).show();d.equal(c,1,"global queue maxVisible 1 ok");var b=0;Noty.setMaxVisible(1,"customQueue");new Noty({queue:"customQueue"}).on("beforeShow",function(){b++}).show();new Noty({queue:"customQueue"}).on("beforeShow",function(){b++}).show();d.equal(b,1,"custom queue maxVisible 1 ok")});QUnit.test("closeAll()",function(c){c.expect(4);Noty.setMaxVisible(8);Noty.setMaxVisible(8,"customQueue");var d=0;new Noty().on("onClose",function(){d++}).show();new Noty().on("onClose",function(){d++}).show();Noty.closeAll();var e=0;new Noty({queue:"customQueueClose"}).on("onClose",function(){e++}).show();new Noty({queue:"customQueueClose"}).on("onClose",function(){e++}).show();var h=true;var g=new Noty({queue:"otherCustomQueueClose"}).on("onClose",function(){h=false}).show();var b=true;var f=new Noty({queue:"customQueueClose",closeWith:[],timeout:false}).on("onClose",function(){b=false}).show();Noty.closeAll("customQueueClose");c.equal(d,2,"closeAll closes all notifications");c.equal(e,2,"closeAll closes custom queue notifications");c.equal(h,true,"closeAll should not close the other queue notifications");c.equal(b,true,"closeAll should not close the non-Killable notifications");f.close();g.close()});QUnit.test("button()",function(b){b.expect(13);var c=Noty.button("buttonText");b.ok(c.dom,"button has dom object");b.ok(c.dom.innerHTML==="buttonText","button innerHTML is ok");b.equal(c.id.length,48,"button has a generated ID");b.equal(c.cb,undefined,"button has a no cb function");b.ok($(c.dom).hasClass("noty_btn"),"button has a default class (noty_btn)");b.equal(c.dom.attributes.length,2,"button has 2 default attributes (id, class)");var e=function(){};var d=Noty.button("buttonText","btn1 btn2",e,{id:"myButtonID","data-rick":30});b.ok(d.dom,"button2 has dom object");b.ok(d.dom.innerHTML==="buttonText","button2 innerHTML is ok");b.equal(d.id,"myButtonID","button2 has given ID");b.equal(d.cb,e,"button2 has given cb function");b.ok($(d.dom).hasClass("btn1 btn2"),"button2 has given classes");b.notOk($(d.dom).hasClass("noty_btn"),"button2 has no default class");b.equal(d.dom.attributes.length,3,"button2 has given attributes")});QUnit.test("version()",function(b){b.expect(1);b.equal(typeof Noty.version(),"string","returns version string")})});